{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///service/app/_components/DarkModeToggle.tsx"],"sourcesContent":["\"use client\";\n\nimport { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\n\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ModeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"icon\"\n      onMouseDown={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n    >\n      <Sun className=\"transition-all scale-100 rotate-0 dark:scale-0 dark:-rotate-90 h-[1.2rem] w-[1.2rem]\" />\n      <Moon className=\"absolute transition-all scale-0 rotate-90 dark:scale-100 dark:rotate-0 h-[1.2rem] w-[1.2rem]\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;;;;;;AADA;AAAA;;;AAFA;;;;AAOe,SAAS;;IACtB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD;IAEnC,qBACE,6LAAC;QACC,SAAQ;QACR,MAAK;QACL,aAAa,IAAM,SAAS,UAAU,SAAS,UAAU;;0BAEzD,6LAAC,mMAAA,CAAA,MAAG;gBAAC,WAAU;;;;;;0BACf,6LAAC,qMAAA,CAAA,OAAI;gBAAC,WAAU;;;;;;0BAChB,6LAAC;gBAAK,WAAU;0BAAU;;;;;;;;;;;;AAGhC;GAdwB;;QACM,mJAAA,CAAA,WAAQ;;;KADd"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///service/app/providers.tsx"],"sourcesContent":["\"use client\";\n\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\n/**\n * Provides application-wide context providers for data fetching and theming.\n *\n * This component wraps its children with providers such as `QueryClientProvider` for TanStack Query\n * and `ThemeProvider` for managing the application's theme.\n *\n * @param {React.ReactNode} props.children - The child components to be wrapped.\n *\n * @example\n * <Providers>\n * <App />\n * </Providers>\n *\n * @remarks\n * - Initializes a new `QueryClient` instance using `useState` for efficient re-renders.\n * - The QueryClientProvider provides features like data caching, loading states, and error handling\n * - Configures `ThemeProvider` to use the 'class' attribute, system default theme,\n * enables system theme detection, and disables transition on theme change.\n * - This component should be used at the root level of our application to ensure\n * consistent data fetching and theming throughout.\n * - Wrapping providers in a client component that gets imported instead of around our\n *   layout.tsx stops layout.tsx from being a client component unnecessarily\n */\nexport function Providers({ children }: { children: React.ReactNode }) {\n  const [queryClient] = useState(() => new QueryClient());\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider\n        attribute=\"class\"\n        defaultTheme=\"system\"\n        enableSystem\n        disableTransitionOnChange\n      >\n        {children}\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;AAIA;AADA;AAAA;;;AAHA;;;;AA6BO,SAAS,UAAU,EAAE,QAAQ,EAAiC;;IACnE,MAAM,CAAC,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD;8BAAE,IAAM,IAAI,gLAAA,CAAA,cAAW;;IAEpD,qBACE,6LAAC,yLAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAC3B,cAAA,6LAAC;YACC,WAAU;YACV,cAAa;YACb,YAAY;YACZ,yBAAyB;sBAExB;;;;;;;;;;;AAIT;GAfgB;KAAA"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}